<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd">
    <!-- Spring注解配置 -->
    <!--  有下面的context:component-scan，该配置可以取消
    <context:annotation-config/>-->
	<context:component-scan base-package="com.sail.cot"/>
	<!-- 
	<bean id="myExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
            <property name="corePoolSize" value="5"></property>  
            <property name="maxPoolSize" value="10"></property>  
            <property name="queueCapacity" value="25"></property>  
        </bean>  
      -->
	<task:executor id="theExecutor" pool-size="200" queue-capacity="200" rejection-policy="CALLER_RUNS"/>
    <task:scheduler id="scheduler" pool-size="10"  />  
    <task:annotation-driven executor="theExecutor" scheduler="scheduler" /> 
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/jdbc.properties</value>
            </list>
        </property> 
    </bean>
    <!--
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass"><value>${jdbc.driverClassName}</value></property>
		<property name="jdbcUrl"><value>${jdbc.url}</value></property>
		<property name="user"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
		
		 <property name="maxPoolSize"><value>${c3p0.maxPoolSize}</value></property>
         <property name="minPoolSize"><value>${c3p0.minPoolSize}</value></property>
         <property name="initialPoolSize"><value>${c3p0.initialPoolSize}</value></property>
         <property name="maxIdleTime"><value>${c3p0.maxIdleTime}</value></property> 
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
		<property name="url"><value>jdbc:mysql://192.168.1.105:3306/cotsystem?useUnicode=true</value></property>
		<property name="username"><value>root</value></property>
		<property name="password"><value>admin</value></property>
	</bean>
	-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
		<property name="url"><value>${jdbc.url}</value></property>
		<property name="username"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
		<property name="initialSize"><value>${dbcp.initialSize}</value></property>
		<property name= "maxActive"><value>${dbcp.maxActive}</value></property> 
		<property name= "maxIdle"><value>${dbcp.maxIdle}</value></property> 
		<property name= "minIdle"><value>${dbcp.minIdle}</value></property> 
		<property name= "maxWait"><value>${dbcp.maxWait}</value></property> 
		
	</bean>
	<bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
				<prop key="hibernate.show_sql">false</prop>
               
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <!--  prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop>-->
                <prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
				<!--  
				<prop key="hibernate.ejb.event.post-insert">org.hibernate.ejb.event.EJB3PostInsertEventListener,org.hibernate.envers.event.AuditEventListener</prop>
			    <prop key="hibernate.ejb.event.post-update">org.hibernate.ejb.event.EJB3PostUpdateEventListener,org.hibernate.envers.event.AuditEventListener</prop>
			    <prop key="hibernate.ejb.event.post-delete"> org.hibernate.ejb.event.EJB3PostDeleteEventListener,org.hibernate.envers.event.AuditEventListener</prop>
			    <prop key="hibernate.ejb.event.pre-collection-update">org.hibernate.envers.event.AuditEventListener</prop>
			    <prop key="hibernate.ejb.event.pre-collection-remove">org.hibernate.envers.event.AuditEventListener</prop>
			    <prop key="hibernate.ejb.event.post-collection-recreate">org.hibernate.envers.event.AuditEventListener</prop>
				-->
			</props>
        </property>
    </bean>
    <!-- 处理Blob对象的配置 -->
    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />
    
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource"><ref bean="dataSource" /></property>
		<property name="lobHandler" ref="lobHandler"/>
		<property name="hibernateProperties"><ref local="hibernateProperties"/></property>
		<property name="packagesToScan">
			<list>
				<value>com.sail.cot.domain</value>
			</list>
		</property><!--
		<property name="entityInterceptor">
			<ref bean="myIntercept"/>
		</property>
	   
	   --><!--<property name="eventListeners">
           <map>
               <entry key="save-update"><ref local="MySaveOrUpdateEvent" /></entry>
               <entry key="save"><ref local="MySaveOrUpdateEvent" /></entry>
               <entry key="update"><ref local="MySaveOrUpdateEvent" /></entry>
           </map>
       </property>
	--></bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>
	<!-- 事务注解配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="baseTxProxy" lazy-init="false" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
        <property name="transactionManager"><ref local="transactionManager"/></property>
        <property name="transactionAttributes">
            <props>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="move*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>	
				<prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="recivePOP3Message">PROPAGATION_NOT_SUPPORTED</prop>
				<prop key="addSendout">PROPAGATION_NOT_SUPPORTED</prop>
            </props>
        </property>
    </bean>
    <!-- 配置基础Dao -->
    <bean id="CotBaseDao" class="com.sail.cot.common.dao.impl.CotBaseDaoImpl">
    	<property name="sessionFactory"><ref local="sessionFactory"/></property>
    </bean> 
    <bean id="CotRptService" parent="baseTxProxy">
     	<property name="target">
     		<bean class="com.sail.cot.common.report.impl.CotExportRptServiceImpl">
     			<property name="sessionFactory"><ref local="sessionFactory"/></property>
     		</bean>
     	</property>
     </bean> 
    <!--<bean id="MySaveOrUpdateEvent" class="com.sail.cot.event.HibernatePreInsertEvent">
    </bean>
     <bean id="myIntercept" class="com.sail.cot.event.MyIntercept">
    </bean>
    --><!-- hibenate 监听事件 
    eventInterfaceFromType.put("auto-flush", AutoFlushEventListener.class);
    eventInterfaceFromType.put("merge", MergeEventListener.class);
    eventInterfaceFromType.put("create", PersistEventListener.class);
    eventInterfaceFromType.put("create-onflush", PersistEventListener.class);
    eventInterfaceFromType.put("delete", DeleteEventListener.class);
    eventInterfaceFromType.put("dirty-check", DirtyCheckEventListener.class);
    eventInterfaceFromType.put("evict", EvictEventListener.class);
    eventInterfaceFromType.put("flush", FlushEventListener.class);
    eventInterfaceFromType.put("flush-entity", FlushEntityEventListener.class);
    eventInterfaceFromType.put("load", LoadEventListener.class);
    eventInterfaceFromType.put("load-collection", InitializeCollectionEventListener.class);
    eventInterfaceFromType.put("lock", LockEventListener.class);
    eventInterfaceFromType.put("refresh", RefreshEventListener.class);
    eventInterfaceFromType.put("replicate", ReplicateEventListener.class);
    eventInterfaceFromType.put("save-update", SaveOrUpdateEventListener.class);
    eventInterfaceFromType.put("save", SaveOrUpdateEventListener.class);
    eventInterfaceFromType.put("update", SaveOrUpdateEventListener.class);
    eventInterfaceFromType.put("pre-load", PreLoadEventListener.class);
    eventInterfaceFromType.put("pre-update", PreUpdateEventListener.class);
    eventInterfaceFromType.put("pre-delete", PreDeleteEventListener.class);
    eventInterfaceFromType.put("pre-insert", PreInsertEventListener.class);
    eventInterfaceFromType.put("pre-collection-recreate", PreCollectionRecreateEventListener.class);
    eventInterfaceFromType.put("pre-collection-remove", PreCollectionRemoveEventListener.class);
    eventInterfaceFromType.put("pre-collection-update", PreCollectionUpdateEventListener.class);
    eventInterfaceFromType.put("post-load", PostLoadEventListener.class);
    eventInterfaceFromType.put("post-update", PostUpdateEventListener.class);
    eventInterfaceFromType.put("post-delete", PostDeleteEventListener.class);
    eventInterfaceFromType.put("post-insert", PostInsertEventListener.class);
    eventInterfaceFromType.put("post-commit-update", PostUpdateEventListener.class);
    eventInterfaceFromType.put("post-commit-delete", PostDeleteEventListener.class);
    eventInterfaceFromType.put("post-commit-insert", PostInsertEventListener.class);
    eventInterfaceFromType.put("post-collection-recreate", PostCollectionRecreateEventListener.class);
    eventInterfaceFromType.put("post-collection-remove", PostCollectionRemoveEventListener.class);
    eventInterfaceFromType.put("post-collection-update", PostCollectionUpdateEventListener.class); 
    --> 
    <!--  
    <bean id="mapScheduler" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="onlineTime" />
				<ref bean="mailRecvTime" />
			</list>
		</property>
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="configLocation" value="classpath:quartz.properties" />
	</bean>
	<bean id="triggerOnlineJob" class="com.sail.cot.trigger.TriggerOnlineJob" />
	<bean id="onlineSche" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.sail.cot.util.MyDetailQuartzJobBean
			</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="targetObject" value="triggerOnlineJob" />
				<entry key="targetMethod" value="execute" />
			</map>
		</property>
	</bean>
	<bean id="onlineTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="onlineSche" />
		</property>
		<property name="cronExpression">
			<value>0/30 * * * * ?</value>
		</property>
	</bean>
	
	<bean id="mailReciveJob" class="com.sail.cot.trigger.MailReciveJob" />
	<bean id="mailRecvSche" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.sail.cot.util.MyDetailQuartzJobBean
			</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="targetObject" value="mailReciveJob" />
				<entry key="targetMethod" value="execute" />
			</map>
		</property>
	</bean>
	<bean id="mailRecvTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="mailRecvSche" />
		</property>
		<property name="cronExpression">
			<value>0 0/30 * * * ?</value>
		</property>
	</bean>
	-->
</beans>
